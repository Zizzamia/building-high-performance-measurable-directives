{"version":3,"sources":["regression_slope_validator.js","@traceur/generated/TemplateParser/21","@traceur/generated/TemplateParser/19","@traceur/generated/TemplateParser/11","@traceur/generated/TemplateParser/2","@traceur/generated/TemplateParser/20","@traceur/generated/TemplateParser/5","@traceur/generated/TemplateParser/1","@traceur/generated/TemplateParser/13","@traceur/generated/TemplateParser/15","@traceur/generated/TemplateParser/17","@traceur/generated/TemplateParser/16","@traceur/generated/TemplateParser/10","@traceur/generated/TemplateParser/9","@traceur/generated/TemplateParser/25","@traceur/generated/TemplateParser/8"],"names":[],"mappings":"AAAA;ACAA,KAAK,iBAAiB,AAAC,CAAC,MAAK,QAAQ;0BCArC,EAAC,GAAE,YCAqB;AAAE,qCAAwB;IAAE,ADA9B,CAAC;AEAvB,WAAS,CCAT,EAAC,KAAI,CDAO,KAAG,ACAS,CAAC;CJAgC,CAAC;AKA1D,AAAI,EAAA,CAAA,YAAW,wDAAoB,CAAC;;;;;;;WCApC,EAAC,uCAAoB,CAAA,OAAM,AAAC,2BAAkB,CACtC,CAAA,wCAAqB,iDAA2B,CAAA,wCAAqB,GAAK,EAAC,OAAM,uCAAmB,CAAC,AAD/D,CACgE;SAD9G,EAAC,8CAAoB,CAAA,OAAM,AAAC,kCAAkB,CACtC,CAAA,+CAAqB,wDAA2B,CAAA,+CAAqB,GAAK,EAAC,OAAM,8CAAmB,CAAC,AAD/D,CACgE;APDrG,OAAG;AAAG,cAAU;AAAG,YAAQ;SOApC,EAAC,qBAAoB,CAAA,OAAM,AAAC,eAAkB,CACtC,CAAA,sBAAqB,+BAA2B,CAAA,sBAAqB,GAAK,EAAC,OAAM,qBAAmB,CAAC,AAD/D,CACgE;APArG,OAAG;AAAG,cAAU;EAEhB,UAAQ,EOHjB,EAAC,qCAAoB,CAAA,OAAM,AAAC,gBAAkB,CACtC,CAAA,sCAAqB,+CAA2B,CAAA,sCAAqB,GAAK,EAAC,OAAM,qCAAmB,CAAC,AAD/D,CACgE;EPGrG,UAAQ,EOJjB,EAAC,qCAAoB,CAAA,OAAM,AAAC,gBAAkB,CACtC,CAAA,sCAAqB,+CAA2B,CAAA,sCAAqB,GAAK,EAAC,OAAM,qCAAmB,CAAC,AAD/D,CACgE;EPIrG,cAAY,EOLrB,EAAC,6CAAoB,CAAA,OAAM,AAAC,qBAAkB,CACtC,CAAA,8CAAqB,uDAA2B,CAAA,8CAAqB,GAAK,EAAC,OAAM,6CAAmB,CAAC,AAD/D,CACgE;ACD9G,AAAI,EAAA,2BRWG,SAAM,yBAAuB,CAWtB,UAAS,CAAG,CAAA,MAAK,CAAG;AAC9B,ASvBJ,gBAAc,iBAAiB,AAAC,2BAAkB,KAAK,MAAmB,CTuB/D;AACP,KAAG,YAAY,EAAI,WAAS,CAAC;AAC7B,KAAG,QAAQ,EAAI,OAAK,CAAC;AACvB,AQ1BsC,CAAA;AEAxC,AAAI,EAAA,qDAAoC,CAAA;ACAxC,AAAC,eAAc,YAAY,CAAC,AAAC;AX4B3B,SAAO,CAAP,UAAS,AAAD;AY5BV,SAAO,CAAA,MAAK,WAAW,AAAC,CAAC,CZ6Bd;AACL,iBAAW,CAAG,CAAA,IAAG,YAAY;AAC7B,4BAAsB,CAAG,CAAA,IAAG,QAAQ;AAAA,IACtC,CYhCuC,CZ4B9B,UAAQ,CY5B0C,CAAA;EZiC7D;AAEA,SAAO,CAAP,UAAS,cAAa,AAAoB;AanC5C,SAAK,cAAc,gBCAnB,CAAA,MAAK,YAAY,AdmCS,CAAA,IAAG,CAAE,cAAY,CAAC,AcnCR,CDAE,CAAA;AboClC,OAAI,cAAa,OAAO,GAAK,CAAA,IAAG,YAAY,CAAG;AAC7C,AAAI,QAAA,CAAA,YAAW,EACb,CAAA,WAAU,MAAM,AAAC,CAAC,cAAa,CAAG,CAAA,cAAa,OAAO,EAAI,CAAA,IAAG,YAAY,CAAG,CAAA,cAAa,OAAO,CAAC,CAAC;AACpG,AAAI,QAAA,CAAA,OAAM,EAAI,GAAC,CAAC;AAChB,AAAI,QAAA,CAAA,OAAM,EAAI,GAAC,CAAC;AAChB,UAAS,GAAA,CAAA,CAAA,EAAI,EAAA,CAAG,CAAA,CAAA,EAAE,CAAA,YAAW,OAAO,CAAG,CAAA,CAAA,EAAE,CAAG;AAG1C,kBAAU,KAAK,AAAC,CAAC,OAAM,CAAG,EAAA,CAAC,CAAC;AAC5B,kBAAU,KAAK,AAAC,CAAC,OAAM,CAAG,CAAA,YAAW,CAAE,CAAA,CAAC,OAAO,CAAE,IAAG,QAAQ,CAAC,CAAC,CAAC;MACjE;AAAA,AACI,QAAA,CAAA,eAAc,EAAI,CAAA,SAAQ,yBAAyB,AAAC,CACtD,OAAM,CAAG,CAAA,SAAQ,cAAc,AAAC,CAAC,OAAM,CAAC,CACxC,QAAM,CAAG,CAAA,SAAQ,cAAc,AAAC,CAAC,OAAM,CAAC,CAC1C,CAAC;AYlDP,WAAO,CAAA,MAAK,WAAW,AAAC,CAAC,CZmDZ,eAAc,GAAK,EAAA,CAAA,CAAI,aAAW,EAAI,KAAG,CYnDX,CEA3C,CAAA,MAAK,YAAY,AdmC8B,CAAA,IAAG,CAAE,cAAY,CAAC,AcnC7B,CFA2B,CAAA;IZoD3D,KAAO;AYpDX,WAAO,CAAA,MAAK,WAAW,AAAC,CAAC,CZqDZ,IAAG,CYrD2B,CEA3C,CAAA,MAAK,YAAY,AdmC8B,CAAA,IAAG,CAAE,cAAY,CAAC,AcnC7B,CFA2B,CAAA;IZsD3D;AAAA,EACF;;AA1CA,IAAW,YAAU,EAAI;AAAE,SAAO,aAAW,CAAC;EAAE;AAEhD,IAAW,OAAK,EAAI;AAAE,SAAO,QAAM,CAAC;EAAE;AAEtC,IAAW,SAAO,EAAI;AAAE,SAAO,UAAQ,CAAC;EAAE;AAAA,CANE,UAAQ,CWVE;AIDxD,KAAK,eAAe,AAAC,2DACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,YDD1B,MAAK,YAAY,AdmCS,CAAA,IAAG,CAAE,cAAY,CAAC,AcnCR,GCCa;EAAC,CAAC,CAAC,CAAC;Af0DrD,AAAI,EAAA,CAAA,YAAW,EAAI,IAAI,YAAU,AAAC,CAAC,qCAAoC,CAAC,CAAC;AACzE,AAAI,EAAA,CAAA,OAAM,EAAI,IAAI,YAAU,AAAC,CAAC,iCAAgC,CAAC,CAAC;AAChE,AAAI,EAAA,CAAA,SAAQ,EAAI,EACd,IAAG,AAAC,CAAC,wBAAuB,CAAC,UAAU,AAAC,EACtC,SAAC,UAAS,CAAG,CAAA,MAAK;OAAM,IAAI,yBAAuB,AAAC,CAAC,UAAS,CAAG,OAAK,CAAC;AAAA,EACvE,EAAC,YAAW,CAAG,QAAM,CAAC,CACxB,CACA,CAAA,IAAG,AAAC,CAAC,YAAW,CAAC,QAAQ,AAAC,CAAC,EAAC,CAAC,CAC7B,CAAA,IAAG,AAAC,CAAC,OAAM,CAAC,QAAQ,AAAC,CAAC,QAAO,CAAC,CAChC,CAAC;AACD","file":"/Users/tbosch/projects/angular2/modules/benchpress/src/validator/regression_slope_validator.js","sourceRoot":"/Users/tbosch/projects/angular2/modules/benchpress/src/validator/","sourcesContent":["import { List, ListWrapper, StringMap } from 'angular2/src/facade/collection';\nimport { bind, OpaqueToken } from 'angular2/di';\n\nimport { Validator } from '../validator';\nimport { Statistic } from '../statistic';\nimport { MeasureValues } from '../measure_values';\n\n/**\n * A validator that checks the regression slope of a specific metric.\n * Waits for the regression slope to be >=0.\n */\nexport class RegressionSlopeValidator extends Validator {\n  // TODO(tbosch): use static values when our transpiler supports them\n  static get SAMPLE_SIZE() { return _SAMPLE_SIZE; }\n  // TODO(tbosch): use static values when our transpiler supports them\n  static get METRIC() { return _METRIC; }\n  // TODO(tbosch): use static values when our transpiler supports them\n  static get BINDINGS() { return _BINDINGS; }\n\n  _sampleSize:number;\n  _metric:string;\n\n  constructor(sampleSize, metric) {\n    super();\n    this._sampleSize = sampleSize;\n    this._metric = metric;\n  }\n\n  describe():StringMap {\n    return {\n      'sampleSize': this._sampleSize,\n      'regressionSlopeMetric': this._metric\n    };\n  }\n\n  validate(completeSample:List<MeasureValues>):List<MeasureValues> {\n    if (completeSample.length >= this._sampleSize) {\n      var latestSample =\n        ListWrapper.slice(completeSample, completeSample.length - this._sampleSize, completeSample.length);\n      var xValues = [];\n      var yValues = [];\n      for (var i = 0; i<latestSample.length; i++) {\n        // For now, we only use the array index as x value.\n        // TODO(tbosch): think about whether we should use time here instead\n        ListWrapper.push(xValues, i);\n        ListWrapper.push(yValues, latestSample[i].values[this._metric]);\n      }\n      var regressionSlope = Statistic.calculateRegressionSlope(\n        xValues, Statistic.calculateMean(xValues),\n        yValues, Statistic.calculateMean(yValues)\n      );\n      return regressionSlope >= 0 ? latestSample : null;\n    } else {\n      return null;\n    }\n  }\n\n}\n\nvar _SAMPLE_SIZE = new OpaqueToken('RegressionSlopeValidator.sampleSize');\nvar _METRIC = new OpaqueToken('RegressionSlopeValidator.metric');\nvar _BINDINGS = [\n  bind(RegressionSlopeValidator).toFactory(\n    (sampleSize, metric) => new RegressionSlopeValidator(sampleSize, metric),\n    [_SAMPLE_SIZE, _METRIC]\n  ),\n  bind(_SAMPLE_SIZE).toValue(10),\n  bind(_METRIC).toValue('script')\n];\n","Object.defineProperties(module.exports, $__placeholder__0);","{get: $__placeholder__0}","get $__placeholder__0() { return $__placeholder__1; }","__esModule: true","{value: $__placeholder__0}","var __moduleName = $__placeholder__0;","($__placeholder__0 = require($__placeholder__1),\n        $__placeholder__2 && $__placeholder__3.__esModule && $__placeholder__4 || {default: $__placeholder__5})","var $__placeholder__0 = $__placeholder__1","$traceurRuntime.superConstructor($__placeholder__0).call($__placeholder__1)","var $__placeholder__0 = $__placeholder__1","($traceurRuntime.createClass)($__placeholder__0, $__placeholder__1, $__placeholder__2,\n                                       $__placeholder__3)","return assert.returnType(($__placeholder__0), $__placeholder__1)","assert.argumentTypes($__placeholder__0)","assert.genericType($__placeholder__0)","Object.defineProperty($__placeholder__0, $__placeholder__1,\n        {get: function() {return $__placeholder__2}});"]}