{"version":3,"sources":["shim_component.js","@traceur/generated/TemplateParser/8","@traceur/generated/TemplateParser/7"],"names":[],"mappings":"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","file":"/Users/tbosch/projects/angular2/modules/angular2/src/core/compiler/shadow_dom_emulation/shim_component.js","sourceRoot":"/Users/tbosch/projects/angular2/modules/angular2/src/core/compiler/shadow_dom_emulation/","sourcesContent":["import {Element, DOM} from 'angular2/src/facade/dom';\nimport {Map, MapWrapper} from 'angular2/src/facade/collection';\nimport {int, isBlank, Type} from 'angular2/src/facade/lang';\n\nimport {ShadowCss} from './shadow_css';\n\n/**\n * Used to shim component CSS & DOM\n */\nexport class ShimComponent {\n  constructor(component: Type) {\n  }\n\n  shimCssText(cssText: string): string {\n    return null\n  }\n\n  shimContentElement(element: Element) {}\n\n  shimHostElement(element: Element) {}\n}\n\n/**\n * Native components does not need to the shim.\n *\n * All methods are no-ops.\n */\nexport class ShimNativeComponent extends ShimComponent {\n  constructor(component: Type) {\n    super(component);\n  };\n\n  shimCssText(cssText: string): string {\n    return cssText;\n  }\n\n  shimContentElement(element: Element) {\n  }\n\n  shimHostElement(element: Element) {\n  }\n}\n\nvar _componentCache: Map<Type, int> = MapWrapper.create();\nvar _componentId: int = 0;\n\n// Reset the component cache - used for tests only\nexport function resetShimComponentCache() {\n  MapWrapper.clear(_componentCache);\n  _componentId = 0;\n}\n\n/**\n * Emulated components need to be shimmed:\n * - An attribute needs to be added to the host,\n * - An attribute needs to be added to all nodes in their content,\n * - The CSS needs to be scoped.\n */\nexport class ShimEmulatedComponent extends ShimComponent {\n  _cmpId: int;\n\n  constructor(component: Type) {\n    super(component);\n\n    // Generates a unique ID for components\n    var componentId = MapWrapper.get(_componentCache, component);\n    if (isBlank(componentId)) {\n      componentId = _componentId++;\n      MapWrapper.set(_componentCache, component, componentId);\n    }\n    this._cmpId = componentId;\n  };\n\n  // Scope the CSS\n  shimCssText(cssText: string): string {\n    var shadowCss = new ShadowCss();\n    return shadowCss.shimCssText(cssText, this._getContentAttribute(), this._getHostAttribute());\n  }\n\n  // Add an attribute on a content element\n  shimContentElement(element: Element) {\n    DOM.setAttribute(element, this._getContentAttribute(), '');\n  }\n\n  // Add an attribute to the host\n  shimHostElement(element: Element) {\n    DOM.setAttribute(element, this._getHostAttribute(), '');\n  }\n\n  // Return the attribute to be added to the component\n  _getHostAttribute() {\n    return `_nghost-${this._cmpId}`;\n  }\n\n  // Returns the attribute to be added on every single nodes in the component\n  _getContentAttribute() {\n    return `_ngcontent-${this._cmpId}`;\n  }\n}\n","Object.defineProperty($__placeholder__0, $__placeholder__1,\n        {get: function() {return $__placeholder__2}});","assert.type.$__placeholder__0)"]}