{"version":3,"sources":["template_resolver_mock.js","@traceur/generated/TemplateParser/8"],"names":[],"mappings":"AAAA,KAAO,EAAC,GAAE;AAAG,WAAS;AAAG,YAAU,CAAC,KAAO,iCAA+B,CAAC;AAC3E,KAAO,EAAC,IAAG;AAAG,UAAQ,CAAC,KAAO,2BAAyB,CAAC;AAExD,KAAO,EAAC,QAAO,CAAC,KAAO,yCAAuC,CAAC;AAC/D,KAAO,EAAC,gBAAe,CAAC,KAAO,+CAA6C,CAAC;AAE7E,KAAO,MAAM,qBAAmB,QAAU,iBAAe;AACvD,AAEA,YAAU,CAAE,AAAD,CAAG;AACZ,QAAI,AAAC,EAAC,CAAC;AACP,OAAG,cAAc,EAAI,CAAA,UAAS,OAAO,AAAC,EAAC,CAAC;EAC1C;AAAA,AAEA,YAAU,CAAE,SAAQ,AAAM,CAAG,CAAA,QAAO,AAAU,CAAG;AAC/C,aAAS,IAAI,AAAC,CAAC,IAAG,cAAc,CAAG,UAAQ,CAAG,SAAO,CAAC,CAAC;EACzD;AAAA,AAEA,QAAM,CAAE,SAAQ,AAAM,CAAa;AACjC,AAAI,MAAA,CAAA,QAAO,EAAI,CAAA,UAAS,IAAI,AAAC,CAAC,IAAG,cAAc,CAAG,UAAQ,CAAC,CAAC;AAE5D,OAAI,SAAQ,AAAC,CAAC,QAAO,CAAC,CAAG;AACvB,WAAO,SAAO,CAAC;IACjB;AAAA,AAEA,SAAO,CAAA,KAAI,QAAQ,AAAC,CAAC,SAAQ,CAAC,CAAC;EACjC;AAAA,AACF;AAAA,AC3BA,KAAK,eAAe,AAAC,0DACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,YDaD,IAAG,IAAa,QAAO,GCbC;EAAC,CAAC,CAAC,CAAC;AADrD,KAAK,eAAe,AAAC,sDACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,YDiBL,IAAG,GCjByB;EAAC,CAAC,CAAC,CAAC;AD2BrD","file":"/Users/tbosch/projects/angular2/modules/angular2/src/mock/template_resolver_mock.js","sourceRoot":"/Users/tbosch/projects/angular2/modules/angular2/src/mock/","sourcesContent":["import {Map, MapWrapper, ListWrapper} from 'angular2/src/facade/collection';\nimport {Type, isPresent} from 'angular2/src/facade/lang';\n\nimport {Template} from 'angular2/src/core/annotations/template';\nimport {TemplateResolver} from 'angular2/src/core/compiler/template_resolver';\n\nexport class MockTemplateResolver extends TemplateResolver {\n  _cmpTemplates: Map;\n\n  constructor() {\n    super();\n    this._cmpTemplates = MapWrapper.create();\n  }\n\n  setTemplate(component: Type, template: Template) {\n    MapWrapper.set(this._cmpTemplates, component, template);\n  }\n\n  resolve(component: Type): Template {\n    var override = MapWrapper.get(this._cmpTemplates, component);\n\n    if (isPresent(override)) {\n      return override;\n    }\n\n    return super.resolve(component);\n  }\n}\n","Object.defineProperty($__placeholder__0, $__placeholder__1,\n        {get: function() {return $__placeholder__2}});"]}