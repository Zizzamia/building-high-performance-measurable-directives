"use strict";
Object.defineProperties(module.exports, {
  EventManager: {get: function() {
      return EventManager;
    }},
  EventManagerPlugin: {get: function() {
      return EventManagerPlugin;
    }},
  __esModule: {value: true}
});
var __moduleName = "angular2/src/core/events/event_manager";
var $__rtts_95_assert_47_rtts_95_assert__,
    $__angular2_47_src_47_facade_47_lang__,
    $__angular2_47_src_47_facade_47_dom__,
    $__angular2_47_src_47_facade_47_collection__,
    $__angular2_47_src_47_core_47_zone_47_vm_95_turn_95_zone__;
var assert = ($__rtts_95_assert_47_rtts_95_assert__ = require("rtts_assert/rtts_assert"), $__rtts_95_assert_47_rtts_95_assert__ && $__rtts_95_assert_47_rtts_95_assert__.__esModule && $__rtts_95_assert_47_rtts_95_assert__ || {default: $__rtts_95_assert_47_rtts_95_assert__}).assert;
var $__1 = ($__angular2_47_src_47_facade_47_lang__ = require("angular2/src/facade/lang"), $__angular2_47_src_47_facade_47_lang__ && $__angular2_47_src_47_facade_47_lang__.__esModule && $__angular2_47_src_47_facade_47_lang__ || {default: $__angular2_47_src_47_facade_47_lang__}),
    isBlank = $__1.isBlank,
    BaseException = $__1.BaseException,
    isPresent = $__1.isPresent;
var $__2 = ($__angular2_47_src_47_facade_47_dom__ = require("angular2/src/facade/dom"), $__angular2_47_src_47_facade_47_dom__ && $__angular2_47_src_47_facade_47_dom__.__esModule && $__angular2_47_src_47_facade_47_dom__ || {default: $__angular2_47_src_47_facade_47_dom__}),
    DOM = $__2.DOM,
    Element = $__2.Element;
var $__3 = ($__angular2_47_src_47_facade_47_collection__ = require("angular2/src/facade/collection"), $__angular2_47_src_47_facade_47_collection__ && $__angular2_47_src_47_facade_47_collection__.__esModule && $__angular2_47_src_47_facade_47_collection__ || {default: $__angular2_47_src_47_facade_47_collection__}),
    List = $__3.List,
    ListWrapper = $__3.ListWrapper,
    MapWrapper = $__3.MapWrapper;
var VmTurnZone = ($__angular2_47_src_47_core_47_zone_47_vm_95_turn_95_zone__ = require("angular2/src/core/zone/vm_turn_zone"), $__angular2_47_src_47_core_47_zone_47_vm_95_turn_95_zone__ && $__angular2_47_src_47_core_47_zone_47_vm_95_turn_95_zone__.__esModule && $__angular2_47_src_47_core_47_zone_47_vm_95_turn_95_zone__ || {default: $__angular2_47_src_47_core_47_zone_47_vm_95_turn_95_zone__}).VmTurnZone;
var EventManager = function EventManager(plugins, zone) {
  assert.argumentTypes(plugins, assert.genericType(List, EventManagerPlugin), zone, VmTurnZone);
  this._zone = zone;
  this._plugins = plugins;
  for (var i = 0; i < plugins.length; i++) {
    plugins[i].manager = this;
  }
};
($traceurRuntime.createClass)(EventManager, {
  addEventListener: function(element, eventName, handler) {
    assert.argumentTypes(element, Element, eventName, assert.type.string, handler, Function);
    var plugin = this._findPluginFor(eventName);
    if (isPresent(plugin)) {
      plugin.addEventListener(element, eventName, handler);
    } else {
      this._addNativeEventListener(element, eventName, handler);
    }
  },
  getZone: function() {
    return assert.returnType((this._zone), VmTurnZone);
  },
  _findPluginFor: function(eventName) {
    assert.argumentTypes(eventName, assert.type.string);
    var plugins = this._plugins;
    for (var i = 0; i < plugins.length; i++) {
      var plugin = plugins[i];
      if (plugin.supports(eventName)) {
        return assert.returnType((plugin), EventManagerPlugin);
      }
    }
    return assert.returnType((null), EventManagerPlugin);
  },
  _addNativeEventListener: function(element, eventName, handler) {
    var $__5 = this;
    assert.argumentTypes(element, Element, eventName, assert.type.string, handler, Function);
    this._zone.runOutsideAngular((function() {
      DOM.on(element, eventName, (function(event) {
        if (event.target === element) {
          $__5._zone.run(function() {
            handler(event);
          });
        }
      }));
    }));
  }
}, {});
Object.defineProperty(EventManager, "parameters", {get: function() {
    return [[assert.genericType(List, EventManagerPlugin)], [VmTurnZone]];
  }});
Object.defineProperty(EventManager.prototype.addEventListener, "parameters", {get: function() {
    return [[Element], [assert.type.string], [Function]];
  }});
Object.defineProperty(EventManager.prototype._findPluginFor, "parameters", {get: function() {
    return [[assert.type.string]];
  }});
Object.defineProperty(EventManager.prototype._addNativeEventListener, "parameters", {get: function() {
    return [[Element], [assert.type.string], [Function]];
  }});
var EventManagerPlugin = function EventManagerPlugin() {};
($traceurRuntime.createClass)(EventManagerPlugin, {
  supports: function(eventName) {
    assert.argumentTypes(eventName, assert.type.string);
    return assert.returnType((false), assert.type.boolean);
  },
  addEventListener: function(element, eventName, handler) {
    assert.argumentTypes(element, Element, eventName, assert.type.string, handler, Function);
    throw "not implemented";
  }
}, {});
Object.defineProperty(EventManagerPlugin.prototype.supports, "parameters", {get: function() {
    return [[assert.type.string]];
  }});
Object.defineProperty(EventManagerPlugin.prototype.addEventListener, "parameters", {get: function() {
    return [[Element], [assert.type.string], [Function]];
  }});

//# sourceMappingURL=/Users/tbosch/projects/angular2/modules/angular2/src/core/events/event_manager.map

//# sourceMappingURL=./event_manager.map