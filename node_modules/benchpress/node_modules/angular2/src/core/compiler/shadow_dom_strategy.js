"use strict";
Object.defineProperties(module.exports, {
  ShadowDomStrategy: {get: function() {
      return ShadowDomStrategy;
    }},
  EmulatedShadowDomStrategy: {get: function() {
      return EmulatedShadowDomStrategy;
    }},
  NativeShadowDomStrategy: {get: function() {
      return NativeShadowDomStrategy;
    }},
  __esModule: {value: true}
});
var __moduleName = "angular2/src/core/compiler/shadow_dom_strategy";
var $__rtts_95_assert_47_rtts_95_assert__,
    $__angular2_47_src_47_facade_47_lang__,
    $__angular2_47_src_47_facade_47_dom__,
    $__angular2_47_src_47_facade_47_collection__,
    $__angular2_47_src_47_core_47_compiler_47_view__,
    $__angular2_47_src_47_core_47_compiler_47_shadow_95_dom_95_emulation_47_content_95_tag__,
    $__angular2_47_src_47_core_47_compiler_47_shadow_95_dom_95_emulation_47_light_95_dom__,
    $__angular2_47_src_47_core_47_compiler_47_shadow_95_dom_95_emulation_47_shim_95_component__;
var assert = ($__rtts_95_assert_47_rtts_95_assert__ = require("rtts_assert/rtts_assert"), $__rtts_95_assert_47_rtts_95_assert__ && $__rtts_95_assert_47_rtts_95_assert__.__esModule && $__rtts_95_assert_47_rtts_95_assert__ || {default: $__rtts_95_assert_47_rtts_95_assert__}).assert;
var $__1 = ($__angular2_47_src_47_facade_47_lang__ = require("angular2/src/facade/lang"), $__angular2_47_src_47_facade_47_lang__ && $__angular2_47_src_47_facade_47_lang__.__esModule && $__angular2_47_src_47_facade_47_lang__ || {default: $__angular2_47_src_47_facade_47_lang__}),
    Type = $__1.Type,
    isBlank = $__1.isBlank,
    isPresent = $__1.isPresent;
var $__2 = ($__angular2_47_src_47_facade_47_dom__ = require("angular2/src/facade/dom"), $__angular2_47_src_47_facade_47_dom__ && $__angular2_47_src_47_facade_47_dom__.__esModule && $__angular2_47_src_47_facade_47_dom__ || {default: $__angular2_47_src_47_facade_47_dom__}),
    DOM = $__2.DOM,
    Element = $__2.Element;
var $__3 = ($__angular2_47_src_47_facade_47_collection__ = require("angular2/src/facade/collection"), $__angular2_47_src_47_facade_47_collection__ && $__angular2_47_src_47_facade_47_collection__.__esModule && $__angular2_47_src_47_facade_47_collection__ || {default: $__angular2_47_src_47_facade_47_collection__}),
    List = $__3.List,
    ListWrapper = $__3.ListWrapper;
var View = ($__angular2_47_src_47_core_47_compiler_47_view__ = require("./view"), $__angular2_47_src_47_core_47_compiler_47_view__ && $__angular2_47_src_47_core_47_compiler_47_view__.__esModule && $__angular2_47_src_47_core_47_compiler_47_view__ || {default: $__angular2_47_src_47_core_47_compiler_47_view__}).View;
var Content = ($__angular2_47_src_47_core_47_compiler_47_shadow_95_dom_95_emulation_47_content_95_tag__ = require("./shadow_dom_emulation/content_tag"), $__angular2_47_src_47_core_47_compiler_47_shadow_95_dom_95_emulation_47_content_95_tag__ && $__angular2_47_src_47_core_47_compiler_47_shadow_95_dom_95_emulation_47_content_95_tag__.__esModule && $__angular2_47_src_47_core_47_compiler_47_shadow_95_dom_95_emulation_47_content_95_tag__ || {default: $__angular2_47_src_47_core_47_compiler_47_shadow_95_dom_95_emulation_47_content_95_tag__}).Content;
var LightDom = ($__angular2_47_src_47_core_47_compiler_47_shadow_95_dom_95_emulation_47_light_95_dom__ = require("./shadow_dom_emulation/light_dom"), $__angular2_47_src_47_core_47_compiler_47_shadow_95_dom_95_emulation_47_light_95_dom__ && $__angular2_47_src_47_core_47_compiler_47_shadow_95_dom_95_emulation_47_light_95_dom__.__esModule && $__angular2_47_src_47_core_47_compiler_47_shadow_95_dom_95_emulation_47_light_95_dom__ || {default: $__angular2_47_src_47_core_47_compiler_47_shadow_95_dom_95_emulation_47_light_95_dom__}).LightDom;
var $__7 = ($__angular2_47_src_47_core_47_compiler_47_shadow_95_dom_95_emulation_47_shim_95_component__ = require("./shadow_dom_emulation/shim_component"), $__angular2_47_src_47_core_47_compiler_47_shadow_95_dom_95_emulation_47_shim_95_component__ && $__angular2_47_src_47_core_47_compiler_47_shadow_95_dom_95_emulation_47_shim_95_component__.__esModule && $__angular2_47_src_47_core_47_compiler_47_shadow_95_dom_95_emulation_47_shim_95_component__ || {default: $__angular2_47_src_47_core_47_compiler_47_shadow_95_dom_95_emulation_47_shim_95_component__}),
    ShimComponent = $__7.ShimComponent,
    ShimEmulatedComponent = $__7.ShimEmulatedComponent,
    ShimNativeComponent = $__7.ShimNativeComponent;
var ShadowDomStrategy = function ShadowDomStrategy() {};
($traceurRuntime.createClass)(ShadowDomStrategy, {
  attachTemplate: function(el, view) {
    assert.argumentTypes(el, Element, view, View);
  },
  constructLightDom: function(lightDomView, shadowDomView, el) {
    assert.argumentTypes(lightDomView, View, shadowDomView, View, el, Element);
  },
  polyfillDirectives: function() {
    return assert.returnType((null), assert.genericType(List, Type));
  },
  extractStyles: function() {
    return assert.returnType((false), assert.type.boolean);
  },
  getShimComponent: function(component) {
    assert.argumentTypes(component, Type);
    return assert.returnType((null), ShimComponent);
  }
}, {});
Object.defineProperty(ShadowDomStrategy.prototype.attachTemplate, "parameters", {get: function() {
    return [[Element], [View]];
  }});
Object.defineProperty(ShadowDomStrategy.prototype.constructLightDom, "parameters", {get: function() {
    return [[View], [View], [Element]];
  }});
Object.defineProperty(ShadowDomStrategy.prototype.getShimComponent, "parameters", {get: function() {
    return [[Type]];
  }});
var EmulatedShadowDomStrategy = function EmulatedShadowDomStrategy() {
  $traceurRuntime.superConstructor($EmulatedShadowDomStrategy).call(this);
};
var $EmulatedShadowDomStrategy = EmulatedShadowDomStrategy;
($traceurRuntime.createClass)(EmulatedShadowDomStrategy, {
  attachTemplate: function(el, view) {
    assert.argumentTypes(el, Element, view, View);
    DOM.clearNodes(el);
    moveViewNodesIntoParent(el, view);
  },
  constructLightDom: function(lightDomView, shadowDomView, el) {
    assert.argumentTypes(lightDomView, View, shadowDomView, View, el, Element);
    return new LightDom(lightDomView, shadowDomView, el);
  },
  polyfillDirectives: function() {
    return assert.returnType(([Content]), assert.genericType(List, Type));
  },
  extractStyles: function() {
    return assert.returnType((true), assert.type.boolean);
  },
  getShimComponent: function(component) {
    assert.argumentTypes(component, Type);
    return assert.returnType((new ShimEmulatedComponent(component)), ShimComponent);
  }
}, {}, ShadowDomStrategy);
Object.defineProperty(EmulatedShadowDomStrategy.prototype.attachTemplate, "parameters", {get: function() {
    return [[Element], [View]];
  }});
Object.defineProperty(EmulatedShadowDomStrategy.prototype.constructLightDom, "parameters", {get: function() {
    return [[View], [View], [Element]];
  }});
Object.defineProperty(EmulatedShadowDomStrategy.prototype.getShimComponent, "parameters", {get: function() {
    return [[Type]];
  }});
var NativeShadowDomStrategy = function NativeShadowDomStrategy() {
  $traceurRuntime.superConstructor($NativeShadowDomStrategy).call(this);
};
var $NativeShadowDomStrategy = NativeShadowDomStrategy;
($traceurRuntime.createClass)(NativeShadowDomStrategy, {
  attachTemplate: function(el, view) {
    assert.argumentTypes(el, Element, view, View);
    moveViewNodesIntoParent(el.createShadowRoot(), view);
  },
  constructLightDom: function(lightDomView, shadowDomView, el) {
    assert.argumentTypes(lightDomView, View, shadowDomView, View, el, Element);
    return null;
  },
  polyfillDirectives: function() {
    return assert.returnType(([]), assert.genericType(List, Type));
  },
  extractStyles: function() {
    return assert.returnType((false), assert.type.boolean);
  },
  getShimComponent: function(component) {
    assert.argumentTypes(component, Type);
    return assert.returnType((new ShimNativeComponent(component)), ShimComponent);
  }
}, {}, ShadowDomStrategy);
Object.defineProperty(NativeShadowDomStrategy.prototype.attachTemplate, "parameters", {get: function() {
    return [[Element], [View]];
  }});
Object.defineProperty(NativeShadowDomStrategy.prototype.constructLightDom, "parameters", {get: function() {
    return [[View], [View], [Element]];
  }});
Object.defineProperty(NativeShadowDomStrategy.prototype.getShimComponent, "parameters", {get: function() {
    return [[Type]];
  }});
function moveViewNodesIntoParent(parent, view) {
  for (var i = 0; i < view.nodes.length; ++i) {
    DOM.appendChild(parent, view.nodes[i]);
  }
}

//# sourceMappingURL=/Users/tbosch/projects/angular2/modules/angular2/src/core/compiler/shadow_dom_strategy.map

//# sourceMappingURL=./shadow_dom_strategy.map