"use strict";
Object.defineProperties(module.exports, {
  ShimComponent: {get: function() {
      return ShimComponent;
    }},
  ShimNativeComponent: {get: function() {
      return ShimNativeComponent;
    }},
  resetShimComponentCache: {get: function() {
      return resetShimComponentCache;
    }},
  ShimEmulatedComponent: {get: function() {
      return ShimEmulatedComponent;
    }},
  __esModule: {value: true}
});
var __moduleName = "angular2/src/core/compiler/shadow_dom_emulation/shim_component";
var $__rtts_95_assert_47_rtts_95_assert__,
    $__angular2_47_src_47_facade_47_dom__,
    $__angular2_47_src_47_facade_47_collection__,
    $__angular2_47_src_47_facade_47_lang__,
    $__angular2_47_src_47_core_47_compiler_47_shadow_95_dom_95_emulation_47_shadow_95_css__;
var assert = ($__rtts_95_assert_47_rtts_95_assert__ = require("rtts_assert/rtts_assert"), $__rtts_95_assert_47_rtts_95_assert__ && $__rtts_95_assert_47_rtts_95_assert__.__esModule && $__rtts_95_assert_47_rtts_95_assert__ || {default: $__rtts_95_assert_47_rtts_95_assert__}).assert;
var $__1 = ($__angular2_47_src_47_facade_47_dom__ = require("angular2/src/facade/dom"), $__angular2_47_src_47_facade_47_dom__ && $__angular2_47_src_47_facade_47_dom__.__esModule && $__angular2_47_src_47_facade_47_dom__ || {default: $__angular2_47_src_47_facade_47_dom__}),
    Element = $__1.Element,
    DOM = $__1.DOM;
var $__2 = ($__angular2_47_src_47_facade_47_collection__ = require("angular2/src/facade/collection"), $__angular2_47_src_47_facade_47_collection__ && $__angular2_47_src_47_facade_47_collection__.__esModule && $__angular2_47_src_47_facade_47_collection__ || {default: $__angular2_47_src_47_facade_47_collection__}),
    Map = $__2.Map,
    MapWrapper = $__2.MapWrapper;
var $__3 = ($__angular2_47_src_47_facade_47_lang__ = require("angular2/src/facade/lang"), $__angular2_47_src_47_facade_47_lang__ && $__angular2_47_src_47_facade_47_lang__.__esModule && $__angular2_47_src_47_facade_47_lang__ || {default: $__angular2_47_src_47_facade_47_lang__}),
    int = $__3.int,
    isBlank = $__3.isBlank,
    Type = $__3.Type;
var ShadowCss = ($__angular2_47_src_47_core_47_compiler_47_shadow_95_dom_95_emulation_47_shadow_95_css__ = require("./shadow_css"), $__angular2_47_src_47_core_47_compiler_47_shadow_95_dom_95_emulation_47_shadow_95_css__ && $__angular2_47_src_47_core_47_compiler_47_shadow_95_dom_95_emulation_47_shadow_95_css__.__esModule && $__angular2_47_src_47_core_47_compiler_47_shadow_95_dom_95_emulation_47_shadow_95_css__ || {default: $__angular2_47_src_47_core_47_compiler_47_shadow_95_dom_95_emulation_47_shadow_95_css__}).ShadowCss;
var ShimComponent = function ShimComponent(component) {
  assert.argumentTypes(component, Type);
};
($traceurRuntime.createClass)(ShimComponent, {
  shimCssText: function(cssText) {
    assert.argumentTypes(cssText, assert.type.string);
    return assert.returnType((null), assert.type.string);
  },
  shimContentElement: function(element) {
    assert.argumentTypes(element, Element);
  },
  shimHostElement: function(element) {
    assert.argumentTypes(element, Element);
  }
}, {});
Object.defineProperty(ShimComponent, "parameters", {get: function() {
    return [[Type]];
  }});
Object.defineProperty(ShimComponent.prototype.shimCssText, "parameters", {get: function() {
    return [[assert.type.string]];
  }});
Object.defineProperty(ShimComponent.prototype.shimContentElement, "parameters", {get: function() {
    return [[Element]];
  }});
Object.defineProperty(ShimComponent.prototype.shimHostElement, "parameters", {get: function() {
    return [[Element]];
  }});
var ShimNativeComponent = function ShimNativeComponent(component) {
  assert.argumentTypes(component, Type);
  $traceurRuntime.superConstructor($ShimNativeComponent).call(this, component);
};
var $ShimNativeComponent = ShimNativeComponent;
($traceurRuntime.createClass)(ShimNativeComponent, {
  shimCssText: function(cssText) {
    assert.argumentTypes(cssText, assert.type.string);
    return assert.returnType((cssText), assert.type.string);
  },
  shimContentElement: function(element) {
    assert.argumentTypes(element, Element);
  },
  shimHostElement: function(element) {
    assert.argumentTypes(element, Element);
  }
}, {}, ShimComponent);
Object.defineProperty(ShimNativeComponent, "parameters", {get: function() {
    return [[Type]];
  }});
Object.defineProperty(ShimNativeComponent.prototype.shimCssText, "parameters", {get: function() {
    return [[assert.type.string]];
  }});
Object.defineProperty(ShimNativeComponent.prototype.shimContentElement, "parameters", {get: function() {
    return [[Element]];
  }});
Object.defineProperty(ShimNativeComponent.prototype.shimHostElement, "parameters", {get: function() {
    return [[Element]];
  }});
var _componentCache = assert.type(MapWrapper.create(), assert.genericType(Map, Type, int));
var _componentId = assert.type(0, int);
function resetShimComponentCache() {
  MapWrapper.clear(_componentCache);
  _componentId = 0;
}
var ShimEmulatedComponent = function ShimEmulatedComponent(component) {
  assert.argumentTypes(component, Type);
  $traceurRuntime.superConstructor($ShimEmulatedComponent).call(this, component);
  var componentId = MapWrapper.get(_componentCache, component);
  if (isBlank(componentId)) {
    componentId = _componentId++;
    MapWrapper.set(_componentCache, component, componentId);
  }
  this._cmpId = componentId;
};
var $ShimEmulatedComponent = ShimEmulatedComponent;
($traceurRuntime.createClass)(ShimEmulatedComponent, {
  shimCssText: function(cssText) {
    assert.argumentTypes(cssText, assert.type.string);
    var shadowCss = new ShadowCss();
    return assert.returnType((shadowCss.shimCssText(cssText, this._getContentAttribute(), this._getHostAttribute())), assert.type.string);
  },
  shimContentElement: function(element) {
    assert.argumentTypes(element, Element);
    DOM.setAttribute(element, this._getContentAttribute(), '');
  },
  shimHostElement: function(element) {
    assert.argumentTypes(element, Element);
    DOM.setAttribute(element, this._getHostAttribute(), '');
  },
  _getHostAttribute: function() {
    return ("_nghost-" + this._cmpId);
  },
  _getContentAttribute: function() {
    return ("_ngcontent-" + this._cmpId);
  }
}, {}, ShimComponent);
Object.defineProperty(ShimEmulatedComponent, "parameters", {get: function() {
    return [[Type]];
  }});
Object.defineProperty(ShimEmulatedComponent.prototype.shimCssText, "parameters", {get: function() {
    return [[assert.type.string]];
  }});
Object.defineProperty(ShimEmulatedComponent.prototype.shimContentElement, "parameters", {get: function() {
    return [[Element]];
  }});
Object.defineProperty(ShimEmulatedComponent.prototype.shimHostElement, "parameters", {get: function() {
    return [[Element]];
  }});

//# sourceMappingURL=/Users/tbosch/projects/angular2/modules/angular2/src/core/compiler/shadow_dom_emulation/shim_component.map

//# sourceMappingURL=./shim_component.map