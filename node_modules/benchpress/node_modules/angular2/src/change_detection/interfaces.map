{"version":3,"sources":["interfaces.js","@traceur/generated/TemplateParser/21","@traceur/generated/TemplateParser/19","@traceur/generated/TemplateParser/11","@traceur/generated/TemplateParser/2","@traceur/generated/TemplateParser/20","@traceur/generated/TemplateParser/5","@traceur/generated/TemplateParser/1","@traceur/generated/TemplateParser/13","@traceur/generated/TemplateParser/14","@traceur/generated/TemplateParser/9","@traceur/generated/TemplateParser/692","@traceur/generated/TemplateParser/25","@traceur/generated/TemplateParser/8","@traceur/generated/TemplateParser/17","@traceur/generated/TemplateParser/7"],"names":[],"mappings":"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","file":"/Users/tbosch/projects/angular2/modules/angular2/src/change_detection/interfaces.js","sourceRoot":"/Users/tbosch/projects/angular2/modules/angular2/src/change_detection/","sourcesContent":["import {List} from 'angular2/src/facade/collection';\n\nexport class ChangeRecord {\n  bindingMemento:any;\n  change:any;\n\n  constructor(bindingMemento, change) {\n    this.bindingMemento = bindingMemento;\n    this.change = change;\n  }\n\n  //REMOVE IT\n  get currentValue() {\n    return this.change.currentValue;\n  }\n\n  get previousValue() {\n    return this.change.previousValue;\n  }\n}\n\n\n/**\n * CHECK_ONCE means that after calling detectChanges the mode of the change detector\n * will become CHECKED.\n */\nexport const CHECK_ONCE=\"CHECK_ONCE\";\n\n/**\n * CHECKED means that the change detector should be skipped until its mode changes to\n * CHECK_ONCE or CHECK_ALWAYS.\n */\nexport const CHECKED=\"CHECKED\";\n\n/**\n * CHECK_ALWAYS means that after calling detectChanges the mode of the change detector\n * will remain CHECK_ALWAYS.\n */\nexport const CHECK_ALWAYS=\"ALWAYS_CHECK\";\n\n/**\n * DETACHED means that the change detector sub tree is not a part of the main tree and\n * should be skipped.\n */\nexport const DETACHED=\"DETACHED\";\n\nexport class ChangeDispatcher {\n  onRecordChange(directiveMemento, records:List<ChangeRecord>) {}\n}\n\nexport class ChangeDetector {\n  parent:ChangeDetector;\n  mode:string;\n\n  addChild(cd:ChangeDetector) {}\n  removeChild(cd:ChangeDetector) {}\n  remove() {}\n  setContext(context:any) {}\n  markPathToRootAsCheckOnce() {}\n\n  detectChanges() {}\n  checkNoChanges() {}\n}\n","Object.defineProperties(module.exports, $__placeholder__0);","{get: $__placeholder__0}","get $__placeholder__0() { return $__placeholder__1; }","__esModule: true","{value: $__placeholder__0}","var __moduleName = $__placeholder__0;","($__placeholder__0 = require($__placeholder__1),\n        $__placeholder__2 && $__placeholder__3.__esModule && $__placeholder__4 || {default: $__placeholder__5})","var $__placeholder__0 = $__placeholder__1","($traceurRuntime.createClass)($__placeholder__0, $__placeholder__1, $__placeholder__2)","assert.argumentTypes($__placeholder__0)","assert.type.any","assert.genericType($__placeholder__0)","Object.defineProperty($__placeholder__0, $__placeholder__1,\n        {get: function() {return $__placeholder__2}});","var $__placeholder__0 = $__placeholder__1","assert.type.$__placeholder__0)"]}